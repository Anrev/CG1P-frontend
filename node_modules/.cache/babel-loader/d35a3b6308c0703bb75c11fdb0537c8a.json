{"ast":null,"code":"var _jsxFileName = \"/Users/anrev/Desktop/CG1P/frontend/todo-app/src/Components/todo/TodoComponent.jsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Form, Formik, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService.js';\nimport AuthenticationService from '../fixed/AuthenticationService.js';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Placeholder from 'react-bootstrap/Placeholder'; // Page to update or add a specific todo\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoComponent extends Component {\n  constructor(props) {\n    super(props); // State of the page - contains id, desc, and date for a specific todo.\n\n    this.state = {\n      id: this.props.match.params.id,\n      description: '',\n      targetDate: moment(new Date()).format('YYYY-MM-DD')\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  } // on load of page\n\n\n  componentDidMount() {\n    // if -1 (create), do not try to load todo as it is empty\n    if (this.state.id === \"-1\") {\n      return;\n    }\n\n    let username = AuthenticationService.getLoggedInUserName();\n    TodoDataService.retrieveTodo(username, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n    }));\n  } // on Formik Submit\n\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUserName();\n    let todo = {\n      id: this.state.id,\n      description: values.description,\n      targetDate: values.targetDate\n    };\n    console.log(this.state.id); // if state (todo id) is -1, means todo does not exist yet, means create todo\n\n    if (this.state.id == -1) {\n      console.log(\"id=1\");\n      TodoDataService.createTodo(username, todo).then(() => this.props.history.push(\"/todos\")); // else state (todo id) is not -1, means todo exists, means update todo\n    } else {\n      TodoDataService.updateTodo(username, this.state.id, todo).then(() => this.props.history.push(\"/todos\"));\n    }\n  } // on Formik Validate call\n  // if errors populated, will not call onSubmit above\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter at least 5 characters for description\";\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = \"Enter a valid target Date\";\n    }\n\n    return errors;\n  }\n\n  render() {\n    // rely on modern JS destructuring, can assign/retrieve together\n    let {\n      description,\n      targetDate\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(Placeholder, {\n              xs: 12,\n              bg: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Placeholder, {\n              xs: 12,\n              bg: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Card, {\n              children: [/*#__PURE__*/_jsxDEV(Placeholder, {\n                xs: 12,\n                bg: \"light\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"text-dark\",\n                children: \"What are you gonna do today? :)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"container text-dark\",\n                children: /*#__PURE__*/_jsxDEV(Card.Body, {\n                  children: /*#__PURE__*/_jsxDEV(Formik, {\n                    initialValues: {\n                      description,\n                      targetDate\n                    },\n                    onSubmit: this.onSubmit,\n                    validateOnChange: false,\n                    validateOnBlur: false,\n                    validate: this.validate,\n                    enableReinitialize: true,\n                    children: props => /*#__PURE__*/_jsxDEV(Form, {\n                      children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n                        name: \"description\",\n                        component: \"div\",\n                        className: \"alert alert-warning \"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 124,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                        name: \"targetDate\",\n                        component: \"div\",\n                        className: \"alert alert-warning\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 125,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                        className: \"form-group\",\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Description\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 127,\n                          columnNumber: 61\n                        }, this), /*#__PURE__*/_jsxDEV(Field, {\n                          className: \"form-control\",\n                          type: \"text\",\n                          name: \"description\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 128,\n                          columnNumber: 61\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 126,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                        className: \"form-group\",\n                        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                          children: \"Target Date\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 131,\n                          columnNumber: 61\n                        }, this), /*#__PURE__*/_jsxDEV(Field, {\n                          className: \"form-control\",\n                          type: \"date\",\n                          name: \"targetDate\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 132,\n                          columnNumber: 61\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 130,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Placeholder, {\n                        xs: 12,\n                        bg: \"light\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 134,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"btn btn-success\",\n                        type: \"submit\",\n                        children: \"Save\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 135,\n                        columnNumber: 57\n                      }, this), /*#__PURE__*/_jsxDEV(Placeholder, {\n                        xs: 12,\n                        bg: \"light\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 136,\n                        columnNumber: 57\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 123,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TodoComponent;","map":{"version":3,"sources":["/Users/anrev/Desktop/CG1P/frontend/todo-app/src/Components/todo/TodoComponent.jsx"],"names":["React","Component","moment","Form","Formik","Field","ErrorMessage","TodoDataService","AuthenticationService","Container","Row","Col","Card","Button","Placeholder","TodoComponent","constructor","props","state","id","match","params","description","targetDate","Date","format","onSubmit","bind","validate","componentDidMount","username","getLoggedInUserName","retrieveTodo","then","response","setState","data","values","todo","console","log","createTodo","history","push","updateTodo","errors","length","isValid","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Form, Formik, Field, ErrorMessage } from 'formik'\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from '../fixed/AuthenticationService.js'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport Placeholder from 'react-bootstrap/Placeholder'\n\n// Page to update or add a specific todo\nclass TodoComponent extends Component {\n\n\n\n    constructor(props) {\n        super(props)\n\n        // State of the page - contains id, desc, and date for a specific todo.\n        this.state = {\n            id: this.props.match.params.id,\n            description: '',\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\n\n        }\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n\n    }\n\n    // on load of page\n    componentDidMount() {\n\n\n        // if -1 (create), do not try to load todo as it is empty\n        if (this.state.id === \"-1\") {\n            return\n        }\n\n        let username = AuthenticationService.getLoggedInUserName();\n\n        TodoDataService.retrieveTodo(username, this.state.id)\n            .then(\n                response => this.setState({\n                    description: response.data.description,\n                    targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n                })\n            )\n    }\n\n    // on Formik Submit\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInUserName();\n        let todo = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n\n        console.log(this.state.id)\n\n        // if state (todo id) is -1, means todo does not exist yet, means create todo\n        if (this.state.id == -1) {\n            console.log(\"id=1\")\n            TodoDataService.createTodo(username, todo)\n                .then(() => this.props.history.push(\"/todos\"))\n            // else state (todo id) is not -1, means todo exists, means update todo\n        } else {\n            TodoDataService.updateTodo(username, this.state.id, todo)\n                .then(() => this.props.history.push(\"/todos\"))\n        }\n    }\n\n    // on Formik Validate call\n    // if errors populated, will not call onSubmit above\n    validate(values) {\n        let errors = {}\n\n        if (!values.description) {\n            errors.description = \"Enter a description\"\n        } else if (values.description.length < 5) {\n            errors.description = \"Enter at least 5 characters for description\"\n        }\n\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = \"Enter a valid target Date\"\n        }\n\n        return errors\n    }\n\n    render() {\n        // rely on modern JS destructuring, can assign/retrieve together\n        let { description, targetDate } = this.state\n\n        return (\n            <div>\n\n                <Container>\n                    <Row>\n                        <Col></Col>\n                        <Col>\n                        <Placeholder xs={12} bg=\"black\" />\n                        <Placeholder xs={12} bg=\"black\" />\n                            <Card>\n                                <Placeholder xs={12} bg=\"light\" />\n                                <h1 className=\"text-dark\">What are you gonna do today? :)</h1>\n                                <div className=\"container text-dark\">\n                                    <Card.Body>\n                                        <Formik\n                                            initialValues={{ description, targetDate }}\n                                            onSubmit={this.onSubmit}\n                                            validateOnChange={false}\n                                            validateOnBlur={false}\n                                            validate={this.validate}\n                                            enableReinitialize={true}\n                                        >\n                                            {\n                                                (props) => (\n                                                    <Form>\n                                                        <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning \"></ErrorMessage>\n                                                        <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\"></ErrorMessage>\n                                                        <fieldset className=\"form-group\">\n                                                            <label >Description</label>\n                                                            <Field className=\"form-control\" type=\"text\" name=\"description\"></Field>\n                                                        </fieldset>\n                                                        <fieldset className=\"form-group\">\n                                                            <label>Target Date</label>\n                                                            <Field className=\"form-control\" type=\"date\" name=\"targetDate\"></Field>\n                                                        </fieldset>\n                                                        <Placeholder xs={12} bg=\"light\" />\n                                                        <button className=\"btn btn-success\" type=\"submit\" >Save</button>\n                                                        <Placeholder xs={12} bg=\"light\" />\n                                                    </Form>\n                                                )\n                                            }\n                                        </Formik>\n                                    </Card.Body>\n                                </div>\n                            </Card>\n                        </Col>\n                        <Col></Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default TodoComponent;"]},"metadata":{},"sourceType":"module"}