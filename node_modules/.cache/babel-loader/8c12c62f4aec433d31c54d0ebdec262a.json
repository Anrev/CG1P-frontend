{"ast":null,"code":"var _jsxFileName = \"/Users/anrev/Desktop/CG1P/frontend/todo-app/src/Components/TodoComponent.jsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Form, Formik, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../api/TodoDataService.js';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { SESSION_USER_ID } from '../Constants.js'; // Page to update or add a specific todo\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoComponent extends Component {\n  constructor(props) {\n    super(props); // State of the page - contains id, desc, and date for a specific todo.\n\n    this.state = {\n      userId: sessionStorage.getItem(SESSION_USER_ID),\n      id: this.props.match.params.id,\n      description: '',\n      targetDate: moment(new Date()).format('YYYY-MM-DD')\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  } // on load of page\n\n\n  componentDidMount() {\n    // if -1 (create), do not try to load todo as it is empty\n    if (this.state.id === \"-1\") {\n      return;\n    }\n\n    TodoDataService.retrieveTodo(this.state.userId, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n    }));\n  } // on Formik Submit\n\n\n  onSubmit(values) {\n    let todo = {\n      id: this.state.id,\n      description: values.description,\n      targetDate: values.targetDate\n    };\n    console.log(this.state.id); // if state (todo id) is -1, means todo does not exist yet, means create todo\n\n    if (this.state.id == -1) {\n      console.log(\"id=1\");\n      TodoDataService.createTodo(this.state.userId, todo).then(() => this.props.history.push(\"/todos\")); // else state (todo id) is not -1, means todo exists, means update todo\n    } else {\n      TodoDataService.updateTodo(this.state.userId, this.state.id, todo).then(() => this.props.history.push(\"/todos\"));\n    }\n  } // on Formik Validate call\n  // if errors populated, will not call onSubmit above\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter at least 5 characters for description\";\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = \"Enter a valid target Date\";\n    }\n\n    return errors;\n  }\n\n  render() {\n    // rely on modern JS destructuring, can assign/retrieve together\n    let {\n      description,\n      targetDate\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-dark\",\n              children: \"Todo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container text-dark \",\n              children: /*#__PURE__*/_jsxDEV(Formik, {\n                initialValues: {\n                  description,\n                  targetDate\n                },\n                onSubmit: this.onSubmit,\n                validateOnChange: false,\n                validateOnBlur: false,\n                validate: this.validate,\n                enableReinitialize: true,\n                children: props => /*#__PURE__*/_jsxDEV(Form, {\n                  children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"description\",\n                    component: \"div\",\n                    className: \"alert alert-warning \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 110,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"targetDate\",\n                    component: \"div\",\n                    className: \"alert alert-warning\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 111,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 113,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      className: \"form-control\",\n                      type: \"text\",\n                      name: \"description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 114,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 112,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Target Date\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 117,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      className: \"form-control\",\n                      type: \"date\",\n                      name: \"targetDate\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 118,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-success\",\n                    type: \"submit\",\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TodoComponent;","map":{"version":3,"sources":["/Users/anrev/Desktop/CG1P/frontend/todo-app/src/Components/TodoComponent.jsx"],"names":["React","Component","moment","Form","Formik","Field","ErrorMessage","TodoDataService","Container","Row","Col","SESSION_USER_ID","TodoComponent","constructor","props","state","userId","sessionStorage","getItem","id","match","params","description","targetDate","Date","format","onSubmit","bind","validate","componentDidMount","retrieveTodo","then","response","setState","data","values","todo","console","log","createTodo","history","push","updateTodo","errors","length","isValid","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Form, Formik, Field, ErrorMessage } from 'formik'\nimport TodoDataService from '../api/TodoDataService.js'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { SESSION_USER_ID } from '../Constants.js'\n\n// Page to update or add a specific todo\nclass TodoComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        // State of the page - contains id, desc, and date for a specific todo.\n        this.state = {\n            userId: sessionStorage.getItem(SESSION_USER_ID),\n            id: this.props.match.params.id,\n            description: '',\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\n\n        }\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.validate = this.validate.bind(this);\n\n    }\n\n    // on load of page\n    componentDidMount() {\n\n        // if -1 (create), do not try to load todo as it is empty\n        if (this.state.id === \"-1\") {\n            return\n        }\n\n        TodoDataService.retrieveTodo(this.state.userId, this.state.id)\n            .then(response => this.setState({\n                description: response.data.description,\n                targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n            }))\n    }\n\n    // on Formik Submit\n    onSubmit(values) {\n        let todo = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n\n        console.log(this.state.id)\n\n        // if state (todo id) is -1, means todo does not exist yet, means create todo\n        if (this.state.id == -1) {\n            console.log(\"id=1\")\n            TodoDataService.createTodo(this.state.userId, todo)\n                .then(() => this.props.history.push(\"/todos\"))\n            // else state (todo id) is not -1, means todo exists, means update todo\n        } else {\n            TodoDataService.updateTodo(this.state.userId, this.state.id, todo)\n                .then(() => this.props.history.push(\"/todos\"))\n        }\n    }\n\n    // on Formik Validate call\n    // if errors populated, will not call onSubmit above\n    validate(values) {\n        let errors = {}\n\n        if (!values.description) {\n            errors.description = \"Enter a description\"\n        } else if (values.description.length < 5) {\n            errors.description = \"Enter at least 5 characters for description\"\n        }\n\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = \"Enter a valid target Date\"\n        }\n\n        return errors\n    }\n\n    render() {\n        // rely on modern JS destructuring, can assign/retrieve together\n        let { description, targetDate } = this.state\n\n        return (\n            <div>\n                <Col></Col>\n                <Col></Col>\n                <Col></Col>\n                <Col>\n                    <Container>\n                        <Row>\n                            <h1 className=\"text-dark\">Todo</h1>\n                            <div className=\"container text-dark \">\n                                <Formik\n                                    initialValues={{ description, targetDate }}\n                                    onSubmit={this.onSubmit}\n                                    validateOnChange={false}\n                                    validateOnBlur={false}\n                                    validate={this.validate}\n                                    enableReinitialize={true}\n                                >\n                                    {\n                                        (props) => (\n                                            <Form>\n                                                <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning \"></ErrorMessage>\n                                                <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\"></ErrorMessage>\n                                                <fieldset className=\"form-group\">\n                                                    <label >Description</label>\n                                                    <Field className=\"form-control\" type=\"text\" name=\"description\"></Field>\n                                                </fieldset>\n                                                <fieldset className=\"form-group\">\n                                                    <label>Target Date</label>\n                                                    <Field className=\"form-control\" type=\"date\" name=\"targetDate\"></Field>\n                                                </fieldset>\n                                                <button className=\"btn btn-success\" type=\"submit\" >Save</button>\n                                            </Form>\n                                        )\n                                    }\n                                </Formik>\n                            </div>\n                        </Row>\n                    </Container>\n                </Col>\n                <Col></Col>\n                <Col></Col>\n                <Col></Col>\n            </div>\n        )\n    }\n}\n\nexport default TodoComponent;"]},"metadata":{},"sourceType":"module"}