{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../../Constants';\nexport const EMAIL_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'; // Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in email\n\nclass AuthenticationService {\n  // Log Out\n  logout() {\n    sessionStorage.removeItem(EMAIL_SESSION_ATTRIBUTE_NAME);\n  } // Is User Logged In\n\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(EMAIL_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  } // Retrieve Current Email\n\n\n  getLoggedInEmail() {\n    let user = sessionStorage.getItem(EMAIL_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  } // CODE FOR BASIC AUTH\n\n\n  executeBasicAuthenticationService(email, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(email, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(email, password) {\n    return 'Basic ' + window.btoa(email + \":\" + password);\n  }\n\n  registerSuccessfulLoginForBasicAuth(email, password) {\n    sessionStorage.setItem(EMAIL_SESSION_ATTRIBUTE_NAME, email);\n    console.log(\"setting up axios interceptors\");\n    this.setupAxiosInterceptors(this.createBasicAuthToken(email, password));\n    console.log(\"token %s\", this.createBasicAuthToken(email, password));\n  } // BELOW CODE IS SPECIFICALLY FOR JWT AUTH\n  //    executeJwtAuthenticationService(username, password) {\n  //        return axios.post(`${API_URL}/authenticate`, {\n  //            username,\n  //            password\n  //        })\n  //    }\n  //\n  //    registerSuccessfulLoginForJwt(username, token) {\n  //        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n  //        this.setupAxiosInterceptors(this.createJWTToken(token))\n  //    }\n  //\n  //    createJWTToken(token) {\n  //        return 'Bearer ' + token\n  //    }\n  // intercept HTTP requests and include token\n\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/anrev/Desktop/CG1P/frontend/todo-app/src/api/todo/AuthenticationService.js"],"names":["axios","API_URL","EMAIL_SESSION_ATTRIBUTE_NAME","AuthenticationService","logout","sessionStorage","removeItem","isUserLoggedIn","user","getItem","getLoggedInEmail","executeBasicAuthenticationService","email","password","get","headers","authorization","createBasicAuthToken","window","btoa","registerSuccessfulLoginForBasicAuth","setItem","console","log","setupAxiosInterceptors","token","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,OAAO,MAAMC,4BAA4B,GAAG,mBAArC,C,CAEP;AACA;;AACA,MAAMC,qBAAN,CAA4B;AAExB;AACAC,EAAAA,MAAM,GAAG;AACLC,IAAAA,cAAc,CAACC,UAAf,CAA0BJ,4BAA1B;AACH,GALuB,CAOxB;;;AACAK,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGH,cAAc,CAACI,OAAf,CAAuBP,4BAAvB,CAAX;AACA,QAAIM,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH,GAZuB,CAcxB;;;AACAE,EAAAA,gBAAgB,GAAG;AACf,QAAIF,IAAI,GAAGH,cAAc,CAACI,OAAf,CAAuBP,4BAAvB,CAAX;AACA,QAAIM,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH,GAnBuB,CAqBxB;;;AACAG,EAAAA,iCAAiC,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAC/C,WAAOb,KAAK,CAACc,GAAN,CAAW,GAAEb,OAAQ,YAArB,EACH;AAAEc,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,KAA1B,EAAiCC,QAAjC;AAAjB;AAAX,KADG,CAAP;AAEH;;AAEDI,EAAAA,oBAAoB,CAACL,KAAD,EAAQC,QAAR,EAAkB;AAClC,WAAO,WAAWK,MAAM,CAACC,IAAP,CAAYP,KAAK,GAAG,GAAR,GAAcC,QAA1B,CAAlB;AACH;;AAEDO,EAAAA,mCAAmC,CAACR,KAAD,EAAQC,QAAR,EAAkB;AACjDR,IAAAA,cAAc,CAACgB,OAAf,CAAuBnB,4BAAvB,EAAqDU,KAArD;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA,SAAKC,sBAAL,CAA4B,KAAKP,oBAAL,CAA0BL,KAA1B,EAAiCC,QAAjC,CAA5B;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAKN,oBAAL,CAA0BL,KAA1B,EAAiCC,QAAjC,CAAxB;AACH,GApCuB,CAsCxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;;;AACAW,EAAAA,sBAAsB,CAACC,KAAD,EAAQ;AAC1BzB,IAAAA,KAAK,CAAC0B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKtB,cAAL,EAAJ,EAA2B;AACvBsB,QAAAA,MAAM,CAACd,OAAP,CAAeC,aAAf,GAA+BS,KAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AAjEuB;;AAoE5B,eAAe,IAAI1B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nimport { API_URL } from '../../Constants';\n\nexport const EMAIL_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\n// Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in email\nclass AuthenticationService {\n\n    // Log Out\n    logout() {\n        sessionStorage.removeItem(EMAIL_SESSION_ATTRIBUTE_NAME);\n    }\n\n    // Is User Logged In\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(EMAIL_SESSION_ATTRIBUTE_NAME);\n        if (user === null) return false\n        return true\n    }\n\n    // Retrieve Current Email\n    getLoggedInEmail() {\n        let user = sessionStorage.getItem(EMAIL_SESSION_ATTRIBUTE_NAME);\n        if (user === null) return ''\n        return user\n    }\n\n    // CODE FOR BASIC AUTH\n    executeBasicAuthenticationService(email, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(email, password) } })\n    }\n\n    createBasicAuthToken(email, password) {\n        return 'Basic ' + window.btoa(email + \":\" + password)\n    }\n\n    registerSuccessfulLoginForBasicAuth(email, password) {\n        sessionStorage.setItem(EMAIL_SESSION_ATTRIBUTE_NAME, email)\n        console.log(\"setting up axios interceptors\")\n        this.setupAxiosInterceptors(this.createBasicAuthToken(email, password))\n        console.log(\"token %s\", this.createBasicAuthToken(email, password))\n    }\n\n    // BELOW CODE IS SPECIFICALLY FOR JWT AUTH\n//    executeJwtAuthenticationService(username, password) {\n//        return axios.post(`${API_URL}/authenticate`, {\n//            username,\n//            password\n//        })\n//    }\n//\n//    registerSuccessfulLoginForJwt(username, token) {\n//        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n//        this.setupAxiosInterceptors(this.createJWTToken(token))\n//    }\n//\n//    createJWTToken(token) {\n//        return 'Bearer ' + token\n//    }\n\n    // intercept HTTP requests and include token\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config;\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}