{"ast":null,"code":"var _jsxFileName = \"/Users/anrev/Desktop/CG1P/frontend/todo-app/src/Components/TodoComponent.jsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Form, Formik, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../api/TodoDataService.js';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { SESSION_USER_BUSINESS, SESSION_USER_ID } from '../Constants.js';\nimport UserDataService from '../api/UserDataService.js';\nimport Multiselect from 'multiselect-react-dropdown'; // Page to update or add a specific todo\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoComponent extends Component {\n  constructor(props) {\n    super(props); // State of the page - contains id, desc, and date for a specific todo.\n\n    this.state = {\n      userId: sessionStorage.getItem(SESSION_USER_ID),\n      id: this.props.match.params.id,\n      description: '',\n      listItems: [],\n      selectedValues: [],\n      employees: []\n    };\n    this.onSelect = this.onSelect.bind(this);\n    this.onRemove = this.onRemove.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  } // on load of page\n\n\n  componentDidMount() {\n    UserDataService.retrieveUsersByBusiness(sessionStorage.getItem(SESSION_USER_BUSINESS)).then(response => {\n      this.setState({\n        listItems: response.data.map(employee => ({\n          name: employee.name + '  (' + employee.email + ')',\n          value: employee.id\n        }))\n      });\n    }); // if -1 (create), do not try to load todo as it is empty\n\n    if (this.state.id === \"-1\") {\n      return;\n    }\n\n    TodoDataService.retrieveTodo(this.state.userId, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      selectedValues: response.data.createdFor.map(employee => ({\n        name: employee.name + '  (' + employee.email + ')',\n        value: employee.id\n      })),\n      employees: response.data.createdFor.map(employee => employee.id)\n    }));\n    console.log(this.state.employees);\n  } // for employee dropdown\n\n\n  onSelect(selectedList, selectedItem) {\n    this.state.employees.push(selectedItem.value);\n    console.log(this.state.employees);\n  } // for employee dropdown\n\n\n  onRemove(selectedList, removedItem) {\n    const index = this.state.employees.indexOf(removedItem.value);\n    this.state.employees.splice(index, 1);\n    console.log(this.state.employees);\n  } // on Formik Submit\n\n\n  onSubmit(values) {\n    let todo = {\n      description: values.description,\n      createdForIds: this.state.employees\n    };\n    console.log(todo); // if state (todo id) is -1, means todo does not exist yet, means create todo\n\n    if (this.state.id == -1) {\n      TodoDataService.createTodo(this.state.userId, todo).then(() => this.props.history.push(\"/welcome\")); // else state (todo id) is not -1, means todo exists, means update todo\n    } else {\n      TodoDataService.updateTodo(this.state.userId, this.state.id, todo).then(() => this.props.history.push(\"/welcome\"));\n    }\n  } // on Formik Validate call\n  // if errors populated, will not call onSubmit above\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter at least 5 characters for description\";\n    }\n\n    return errors;\n  }\n\n  render() {\n    // rely on modern JS destructuring, can assign/retrieve together\n    let {\n      description\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-dark\",\n              children: \"Todo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container text-dark \",\n              children: /*#__PURE__*/_jsxDEV(Formik, {\n                initialValues: {\n                  description\n                },\n                onSubmit: this.onSubmit,\n                validateOnChange: false,\n                validateOnBlur: false,\n                validate: this.validate,\n                enableReinitialize: true,\n                children: props => /*#__PURE__*/_jsxDEV(Form, {\n                  children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"description\",\n                    component: \"div\",\n                    className: \"alert alert-warning \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 141,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      className: \"form-control\",\n                      type: \"text\",\n                      name: \"description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Assign To\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 145,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n                      options: this.state.listItems,\n                      selectedValues: this.state.selectedValues,\n                      onSelect: this.onSelect,\n                      onRemove: this.onRemove,\n                      displayValue: \"name\",\n                      showCheckbox: true,\n                      closeOnSelect: false,\n                      placeholder: \"Select employees\",\n                      hidePlaceholder: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 146,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-success\",\n                    type: \"submit\",\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TodoComponent;","map":{"version":3,"sources":["/Users/anrev/Desktop/CG1P/frontend/todo-app/src/Components/TodoComponent.jsx"],"names":["React","Component","moment","Form","Formik","Field","ErrorMessage","TodoDataService","Container","Row","Col","SESSION_USER_BUSINESS","SESSION_USER_ID","UserDataService","Multiselect","TodoComponent","constructor","props","state","userId","sessionStorage","getItem","id","match","params","description","listItems","selectedValues","employees","onSelect","bind","onRemove","onSubmit","validate","componentDidMount","retrieveUsersByBusiness","then","response","setState","data","map","employee","name","email","value","retrieveTodo","createdFor","console","log","selectedList","selectedItem","push","removedItem","index","indexOf","splice","values","todo","createdForIds","createTodo","history","updateTodo","errors","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Form, Formik, Field, ErrorMessage } from 'formik'\nimport TodoDataService from '../api/TodoDataService.js'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { SESSION_USER_BUSINESS, SESSION_USER_ID } from '../Constants.js'\nimport UserDataService from '../api/UserDataService.js'\nimport Multiselect from 'multiselect-react-dropdown'\n\n// Page to update or add a specific todo\nclass TodoComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        // State of the page - contains id, desc, and date for a specific todo.\n        this.state = {\n            userId: sessionStorage.getItem(SESSION_USER_ID),\n            id: this.props.match.params.id,\n            description: '',\n            listItems: [],\n            selectedValues: [],\n            employees: []\n        }\n\n        this.onSelect = this.onSelect.bind(this)\n        this.onRemove = this.onRemove.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n    }\n\n    // on load of page\n    componentDidMount() {\n\n        UserDataService.retrieveUsersByBusiness(sessionStorage.getItem(SESSION_USER_BUSINESS))\n            .then(response => {\n                this.setState({\n                    listItems: response.data.map(employee => ({\n                        name: employee.name + '  (' + employee.email + ')',\n                        value: employee.id\n                    }))\n                })\n            })\n\n        // if -1 (create), do not try to load todo as it is empty\n        if (this.state.id === \"-1\") {\n            return\n        }\n\n        TodoDataService.retrieveTodo(this.state.userId, this.state.id)\n            .then(response => this.setState({\n                description: response.data.description,\n                selectedValues: response.data.createdFor.map(employee => ({\n                    name: employee.name + '  (' + employee.email + ')',\n                    value: employee.id\n                })),\n                employees: response.data.createdFor.map(employee => \n                    employee.id\n                )\n            }))\n\n        console.log(this.state.employees)\n    }\n\n    // for employee dropdown\n    onSelect(selectedList, selectedItem) {\n        this.state.employees.push(selectedItem.value)\n        console.log(this.state.employees)\n    }\n\n    // for employee dropdown\n    onRemove(selectedList, removedItem) {\n        const index = this.state.employees.indexOf(removedItem.value)\n        this.state.employees.splice(index, 1)\n        console.log(this.state.employees)\n    }\n\n    // on Formik Submit\n    onSubmit(values) {\n        let todo = {\n            description: values.description,\n            createdForIds: this.state.employees\n        }\n\n        console.log(todo)\n\n        // if state (todo id) is -1, means todo does not exist yet, means create todo\n        if (this.state.id == -1) {\n            TodoDataService.createTodo(this.state.userId, todo)\n                .then(() => this.props.history.push(\"/welcome\"))\n            // else state (todo id) is not -1, means todo exists, means update todo\n        } else {\n            TodoDataService.updateTodo(this.state.userId, this.state.id, todo)\n                .then(() => this.props.history.push(\"/welcome\"))\n        }\n    }\n\n    // on Formik Validate call\n    // if errors populated, will not call onSubmit above\n    validate(values) {\n        let errors = {}\n\n        if (!values.description) {\n            errors.description = \"Enter a description\"\n        } else if (values.description.length < 5) {\n            errors.description = \"Enter at least 5 characters for description\"\n        }\n\n        return errors\n    }\n\n    render() {\n        // rely on modern JS destructuring, can assign/retrieve together\n        let { description } = this.state\n\n        return (\n            <div>\n                <Col></Col>\n                <Col></Col>\n                <Col></Col>\n                <Col>\n                    <Container>\n                        <Row>\n                            <h1 className=\"text-dark\">Todo</h1>\n                            <div className=\"container text-dark \">\n                                <Formik\n                                    initialValues={{ description }}\n                                    onSubmit={this.onSubmit}\n                                    validateOnChange={false}\n                                    validateOnBlur={false}\n                                    validate={this.validate}\n                                    enableReinitialize={true}\n                                >\n                                    {\n                                        (props) => (\n                                            <Form>\n                                                <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning \"></ErrorMessage>\n                                                <fieldset className=\"form-group\">\n                                                    <label >Description</label>\n                                                    <Field className=\"form-control\" type=\"text\" name=\"description\"></Field>\n                                                </fieldset>\n                                                <fieldset className=\"form-group\">\n                                                    <label >Assign To</label>\n                                                    <Multiselect\n                                                        options={this.state.listItems}\n                                                        selectedValues={this.state.selectedValues}\n                                                        onSelect={this.onSelect}\n                                                        onRemove={this.onRemove}\n                                                        displayValue=\"name\"\n                                                        showCheckbox\n                                                        closeOnSelect={false}\n                                                        placeholder=\"Select employees\"\n                                                        hidePlaceholder\n                                                    />\n                                                </fieldset>\n                                                <button className=\"btn btn-success\" type=\"submit\" >Save</button>\n                                            </Form>\n                                        )\n                                    }\n                                </Formik>\n                            </div>\n                        </Row>\n                    </Container>\n                </Col>\n                <Col></Col>\n                <Col></Col>\n                <Col></Col>\n            </div>\n        )\n    }\n}\n\nexport default TodoComponent;"]},"metadata":{},"sourceType":"module"}