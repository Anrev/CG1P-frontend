{"ast":null,"code":"var _jsxFileName = \"/Users/anrev/Desktop/CG1P/frontend/todo-app/src/Components/ListTodosComponent.jsx\";\nimport React, { Component } from 'react';\nimport TodoDataService from '../api/TodoDataService';\nimport moment from 'moment';\nimport Placeholder from 'react-bootstrap/Placeholder';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { SESSION_USER_ID } from '../Constants';\nimport Card from 'react-bootstrap/Card';\nimport { GrAdd } from \"@react-icons/all-files/gr/GrAdd\";\nimport { FaTrashAlt } from \"@react-icons/all-files/fa/FaTrashAlt\";\nimport { GrUpdate } from \"@react-icons/all-files/gr/GrUpdate\"; // Display a list of all Todos, where the user can manage, add, update, delete todos.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ListTodosComponent extends Component {\n  constructor(props) {\n    super(props); // State - contains the array of todos, as well as a message for deleteTodo successful\n\n    this.state = {\n      userId: sessionStorage.getItem(SESSION_USER_ID),\n      todos: [],\n      message: null,\n      show: \"false\",\n      setShow: \"false\"\n    };\n    this.refreshTodos = this.refreshTodos.bind(this);\n    this.addTodoClicked = this.addTodoClicked.bind(this);\n    this.updateTodoClicked = this.updateTodoClicked.bind(this);\n    this.deleteTodoClicked = this.deleteTodoClicked.bind(this);\n    this.handleShow = this.handleShowModal.bind(this);\n    this.handleClose = this.handleCloseModal.bind(this);\n  } // bring todos from axios get into current state for display, after initial render has been triggered.\n\n\n  componentDidMount() {\n    this.refreshTodos();\n    this.setState({\n      showModal: false\n    });\n  }\n\n  handleCloseModal() {\n    //MODAL \n    this.setState({\n      showModal: false\n    });\n  }\n\n  handleShowModal() {\n    //MODAL\n    this.setState({\n      showModal: true\n    });\n  } // same as above, but for subsequent refreshes\n\n\n  refreshTodos() {\n    TodoDataService.retrieveAllTodos(this.state.userId).then(response => this.setState({\n      todos: response.data\n    }));\n  } // handler for when add todo is clicked\n\n\n  addTodoClicked() {\n    this.props.history.push(`/todos/-1`);\n  } // handler for when update todo is clicked\n\n\n  updateTodoClicked(todoId) {\n    this.props.history.push(`/todos/${todoId}`);\n  } // handler for when delete todo is clicked\n\n\n  deleteTodoClicked(todoId) {\n    TodoDataService.deleteTodo(this.state.userId, todoId).then(() => {\n      this.setState({\n        message: `Delete of todo ${todoId} was successful`\n      });\n      this.refreshTodos();\n    });\n  } // jsx render for entire table\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-dark\",\n            children: [this.state.message && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alert alert-success\",\n              children: this.state.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 79\n            }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table text-dark\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Task\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Done?\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 88,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Due\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 89,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Update\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Delete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: // script that for each todo, map it and display id, desc, done, targetDate, and buttons\n                this.state.todos.map(todo => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: todo.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: todo.isDone.toString()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: moment(todo.targetDate).format('YYYY-MM-DD')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-warning\",\n                      onClick: () => this.updateTodoClicked(todo.id),\n                      children: /*#__PURE__*/_jsxDEV(GrUpdate, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 103,\n                        columnNumber: 145\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 103,\n                      columnNumber: 61\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-danger\",\n                      onClick: () => this.deleteTodoClicked(todo.id),\n                      children: /*#__PURE__*/_jsxDEV(FaTrashAlt, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 104,\n                        columnNumber: 144\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 61\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 104,\n                    columnNumber: 57\n                  }, this)]\n                }, todo.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 53\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid gap-2\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: () => this.handleShowModal(),\n                children: /*#__PURE__*/_jsxDEV(GrAdd, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 138\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 63\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Placeholder, {\n        xs: 12,\n        bg: \"transparent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ListTodosComponent;","map":{"version":3,"sources":["/Users/anrev/Desktop/CG1P/frontend/todo-app/src/Components/ListTodosComponent.jsx"],"names":["React","Component","TodoDataService","moment","Placeholder","Container","Row","Col","SESSION_USER_ID","Card","GrAdd","FaTrashAlt","GrUpdate","ListTodosComponent","constructor","props","state","userId","sessionStorage","getItem","todos","message","show","setShow","refreshTodos","bind","addTodoClicked","updateTodoClicked","deleteTodoClicked","handleShow","handleShowModal","handleClose","handleCloseModal","componentDidMount","setState","showModal","retrieveAllTodos","then","response","data","history","push","todoId","deleteTodo","render","map","todo","description","isDone","toString","targetDate","format","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport TodoDataService from '../api/TodoDataService'\nimport moment from 'moment'\nimport Placeholder from 'react-bootstrap/Placeholder'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { SESSION_USER_ID } from '../Constants'\nimport Card from 'react-bootstrap/Card';\nimport { GrAdd } from \"@react-icons/all-files/gr/GrAdd\";\nimport { FaTrashAlt } from \"@react-icons/all-files/fa/FaTrashAlt\";\nimport { GrUpdate } from \"@react-icons/all-files/gr/GrUpdate\";\n\n\n// Display a list of all Todos, where the user can manage, add, update, delete todos.\nclass ListTodosComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        // State - contains the array of todos, as well as a message for deleteTodo successful\n        this.state = {\n            userId: sessionStorage.getItem(SESSION_USER_ID),\n            todos: [],\n            message: null,\n            show : \"false\",\n            setShow : \"false\"\n        }\n\n        this.refreshTodos = this.refreshTodos.bind(this)\n        this.addTodoClicked = this.addTodoClicked.bind(this)\n        this.updateTodoClicked = this.updateTodoClicked.bind(this)\n        this.deleteTodoClicked = this.deleteTodoClicked.bind(this)\n\n        this.handleShow = this.handleShowModal.bind(this);\n        this.handleClose = this.handleCloseModal.bind(this);\n    }\n\n    // bring todos from axios get into current state for display, after initial render has been triggered.\n    componentDidMount() {\n        this.refreshTodos()\n        this.setState({ showModal: false });\n    }\n\n    handleCloseModal() { //MODAL \n        this.setState({ showModal: false });\n    }\n\n    handleShowModal() { //MODAL\n        this.setState({ showModal: true });\n    }\n\n    // same as above, but for subsequent refreshes\n    refreshTodos() {\n        TodoDataService.retrieveAllTodos(this.state.userId)\n            .then(response => this.setState({ todos: response.data }))\n    }\n\n    // handler for when add todo is clicked\n    addTodoClicked() {\n        this.props.history.push(`/todos/-1`)\n    }\n\n    // handler for when update todo is clicked\n    updateTodoClicked(todoId) {\n        this.props.history.push(`/todos/${todoId}`)\n    }\n\n    // handler for when delete todo is clicked\n    deleteTodoClicked(todoId) {\n        TodoDataService.deleteTodo(this.state.userId, todoId)\n            .then(() => {\n                this.setState({ message: `Delete of todo ${todoId} was successful` })\n                this.refreshTodos()\n            })\n    }\n\n    // jsx render for entire table\n    render() {\n        return (\n            <div>\n                    <Card>\n                        <Col>\n                            <div className=\"text-dark\">{this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                                <table className=\"table text-dark\">\n                                    <thead>\n                                        <tr>\n                                            <th>Task</th>\n                                            <th>Done?</th>\n                                            <th>Due</th>\n                                            <th>Update</th>\n                                            <th>Delete</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            // script that for each todo, map it and display id, desc, done, targetDate, and buttons\n                                            this.state.todos.map(\n                                                todo =>\n                                                    <tr key={todo.id}>\n                                                        <td>{todo.description}</td>\n                                                        <td>{todo.isDone.toString()}</td>\n                                                        <td>{moment(todo.targetDate).format('YYYY-MM-DD')}</td>\n                                                        <td><button className=\"btn btn-warning\" onClick={() => this.updateTodoClicked(todo.id)}><GrUpdate/></button></td>\n                                                        <td><button className=\"btn btn-danger\" onClick={() => this.deleteTodoClicked(todo.id)}><FaTrashAlt/></button></td>\n                                                    </tr>\n                                            )\n                                        }\n                                    </tbody>\n                                </table>\n                                <div className=\"d-grid gap-2\"><button className=\"btn btn-success\" onClick={() => this.handleShowModal()}><GrAdd/></button></div>\n                            </div>\n                        </Col>\n                        </Card>\n                        <Placeholder xs={12} bg=\"transparent\" />\n            </div>\n        )\n    }\n}\n\nexport default ListTodosComponent"]},"metadata":{},"sourceType":"module"}