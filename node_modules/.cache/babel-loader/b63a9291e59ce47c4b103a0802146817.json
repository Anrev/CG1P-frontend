{"ast":null,"code":"import axios from 'axios';\nimport { API_URL, SESSION_INTERCEPTOR, SESSION_TOKEN, SESSION_USER_ID } from '../Constants'; // Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in email\n\nclass AuthenticationService {\n  // Log out\n  logout() {\n    axios.interceptors.request.eject(sessionStorage.getItem(SESSION_INTERCEPTOR));\n    sessionStorage.clear();\n  } // Check if user is logged in\n\n\n  isUserLoggedIn() {\n    let userId = sessionStorage.getItem(SESSION_USER_ID);\n    console.log('logged in: %s', userId);\n    if (userId === null) return false;\n    return true;\n  } // CODE FOR BASIC AUTH\n\n\n  executeBasicAuthenticationService(email, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(email, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(email, password) {\n    let token = 'Basic ' + window.btoa(email + ':' + password);\n    sessionStorage.setItem(SESSION_TOKEN, token);\n    console.log('token: %s', token);\n    return token;\n  }\n\n  registerSuccessfulLoginForBasicAuth(email) {\n    return axios.get(`${API_URL}/user/email/${email}`);\n  } // BELOW CODE IS SPECIFICALLY FOR JWT AUTH\n  //    executeJwtAuthenticationService(username, password) {\n  //        return axios.post(`${API_URL}/authenticate`, {\n  //            username,\n  //            password\n  //        })\n  //    }\n  //\n  //    registerSuccessfulLoginForJwt(username, token) {\n  //        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n  //        this.setupAxiosInterceptors(this.createJWTToken(token))\n  //    }\n  //\n  //    createJWTToken(token) {\n  //        return 'Bearer ' + token\n  //    }\n\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/anrev/Desktop/CG1P/frontend/todo-app/src/api/AuthenticationService.js"],"names":["axios","API_URL","SESSION_INTERCEPTOR","SESSION_TOKEN","SESSION_USER_ID","AuthenticationService","logout","interceptors","request","eject","sessionStorage","getItem","clear","isUserLoggedIn","userId","console","log","executeBasicAuthenticationService","email","password","get","headers","authorization","createBasicAuthToken","token","window","btoa","setItem","registerSuccessfulLoginForBasicAuth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,mBAAlB,EAAuCC,aAAvC,EAAsDC,eAAtD,QAA6E,cAA7E,C,CAEA;AACA;;AACA,MAAMC,qBAAN,CAA4B;AAExB;AACAC,EAAAA,MAAM,GAAG;AACLN,IAAAA,KAAK,CAACO,YAAN,CAAmBC,OAAnB,CAA2BC,KAA3B,CAAiCC,cAAc,CAACC,OAAf,CAAuBT,mBAAvB,CAAjC;AACAQ,IAAAA,cAAc,CAACE,KAAf;AACH,GANuB,CAQxB;;;AACAC,EAAAA,cAAc,GAAG;AACb,QAAIC,MAAM,GAAGJ,cAAc,CAACC,OAAf,CAAuBP,eAAvB,CAAb;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,MAA7B;AACA,QAAIA,MAAM,KAAK,IAAf,EAAqB,OAAO,KAAP;AACrB,WAAO,IAAP;AACH,GAduB,CAgBxB;;;AACAG,EAAAA,iCAAiC,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAC/C,WAAOnB,KAAK,CAACoB,GAAN,CAAW,GAAEnB,OAAQ,YAArB,EACH;AAAEoB,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,KAA1B,EAAiCC,QAAjC;AAAjB;AAAX,KADG,CAAP;AAEH;;AAEDI,EAAAA,oBAAoB,CAACL,KAAD,EAAQC,QAAR,EAAkB;AAClC,QAAIK,KAAK,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAYR,KAAK,GAAG,GAAR,GAAcC,QAA1B,CAAvB;AACAT,IAAAA,cAAc,CAACiB,OAAf,CAAuBxB,aAAvB,EAAsCqB,KAAtC;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBQ,KAAzB;AACA,WAAOA,KAAP;AACH;;AAEDI,EAAAA,mCAAmC,CAACV,KAAD,EAAQ;AACvC,WAAOlB,KAAK,CAACoB,GAAN,CAAW,GAAEnB,OAAQ,eAAciB,KAAM,EAAzC,CAAP;AACH,GA/BuB,CAiCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAhDwB;;AAmD5B,eAAe,IAAIb,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nimport { API_URL, SESSION_INTERCEPTOR, SESSION_TOKEN, SESSION_USER_ID } from '../Constants'\n\n// Service for keeping track of currently authenticated user\n// Also facilitates retrieval of currently logged in email\nclass AuthenticationService {\n\n    // Log out\n    logout() {\n        axios.interceptors.request.eject(sessionStorage.getItem(SESSION_INTERCEPTOR))\n        sessionStorage.clear()\n    }\n\n    // Check if user is logged in\n    isUserLoggedIn() {\n        let userId = sessionStorage.getItem(SESSION_USER_ID)\n        console.log('logged in: %s', userId)\n        if (userId === null) return false\n        return true\n    }\n\n    // CODE FOR BASIC AUTH\n    executeBasicAuthenticationService(email, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(email, password) } })\n    }\n\n    createBasicAuthToken(email, password) {\n        let token = 'Basic ' + window.btoa(email + ':' + password)\n        sessionStorage.setItem(SESSION_TOKEN, token)\n        console.log('token: %s', token)\n        return token\n    }\n\n    registerSuccessfulLoginForBasicAuth(email) {\n        return axios.get(`${API_URL}/user/email/${email}`)\n    }\n\n    // BELOW CODE IS SPECIFICALLY FOR JWT AUTH\n    //    executeJwtAuthenticationService(username, password) {\n    //        return axios.post(`${API_URL}/authenticate`, {\n    //            username,\n    //            password\n    //        })\n    //    }\n    //\n    //    registerSuccessfulLoginForJwt(username, token) {\n    //        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n    //        this.setupAxiosInterceptors(this.createJWTToken(token))\n    //    }\n    //\n    //    createJWTToken(token) {\n    //        return 'Bearer ' + token\n    //    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}