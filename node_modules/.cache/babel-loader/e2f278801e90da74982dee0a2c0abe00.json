{"ast":null,"code":"var _jsxFileName = \"/Users/anrev/Desktop/CG1P/frontend/todo-app/src/Components/todo/SignupComponent.jsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Form, Formik, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService.js';\nimport AuthenticationService from '../../api/todo/AuthenticationService.js';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'; // Page to update or add a specific todo\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoComponent extends Component {\n  constructor(props) {\n    super(props); // State of the page - contains id, desc, and date for a specific todo.\n\n    this.state = {\n      name: '',\n      email: '',\n      password: '',\n      businessName: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  } // on Formik Submit, add user\n\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInEmail();\n    let todo = {\n      id: this.state.id,\n      description: values.description,\n      targetDate: values.targetDate\n    };\n    console.log(this.state.id); // if state (todo id) is -1, means todo does not exist yet, means create todo\n\n    if (this.state.id == -1) {\n      console.log(\"id=1\");\n      TodoDataService.createTodo(username, todo).then(() => this.props.history.push(\"/todos\")); // else state (todo id) is not -1, means todo exists, means update todo\n    } else {\n      TodoDataService.updateTodo(username, this.state.id, todo).then(() => this.props.history.push(\"/todos\"));\n    }\n  } // on Formik Validate call\n  // if errors populated, will not call onSubmit above\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter at least 5 characters for description\";\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = \"Enter a valid target Date\";\n    }\n\n    return errors;\n  }\n\n  render() {\n    let {\n      name,\n      email,\n      password,\n      businessName\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"text-white\",\n              children: \"Todo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container text-white\",\n              children: /*#__PURE__*/_jsxDEV(Formik, {\n                initialValues: {\n                  name,\n                  email,\n                  password,\n                  business\n                },\n                onSubmit: this.onSubmit,\n                validateOnChange: false,\n                validateOnBlur: false,\n                validate: this.validate,\n                enableReinitialize: true,\n                children: props => /*#__PURE__*/_jsxDEV(Form, {\n                  children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"description\",\n                    component: \"div\",\n                    className: \"alert alert-warning \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 105,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"targetDate\",\n                    component: \"div\",\n                    className: \"alert alert-warning\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 108,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      className: \"form-control\",\n                      type: \"text\",\n                      name: \"description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 109,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Target Date\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 112,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      className: \"form-control\",\n                      type: \"date\",\n                      name: \"targetDate\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 113,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 111,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-success\",\n                    type: \"submit\",\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TodoComponent;","map":{"version":3,"sources":["/Users/anrev/Desktop/CG1P/frontend/todo-app/src/Components/todo/SignupComponent.jsx"],"names":["React","Component","moment","Form","Formik","Field","ErrorMessage","TodoDataService","AuthenticationService","Container","Row","Col","TodoComponent","constructor","props","state","name","email","password","businessName","handleChange","bind","onSubmit","validate","event","setState","target","value","values","username","getLoggedInEmail","todo","id","description","targetDate","console","log","createTodo","then","history","push","updateTodo","errors","length","isValid","render","business"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport moment from 'moment'\nimport { Form, Formik, Field, ErrorMessage } from 'formik'\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from '../../api/todo/AuthenticationService.js';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\n// Page to update or add a specific todo\nclass TodoComponent extends Component {\n\n\n\n    constructor(props) {\n        super(props)\n\n        // State of the page - contains id, desc, and date for a specific todo.\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n            businessName: '',\n            \n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this);\n\n    }\n\n    handleChange(event) {\n        this.setState(\n            {\n                [event.target.name]: event.target.value\n            }\n        )\n    }\n\n    // on Formik Submit, add user\n    onSubmit(values) {\n        let username = AuthenticationService.getLoggedInEmail();\n        let todo = {\n            id: this.state.id,\n            description: values.description,\n            targetDate: values.targetDate\n        }\n\n        console.log(this.state.id)\n\n        // if state (todo id) is -1, means todo does not exist yet, means create todo\n        if (this.state.id == -1) {\n            console.log(\"id=1\")\n            TodoDataService.createTodo(username, todo)\n                .then(() => this.props.history.push(\"/todos\"))\n            // else state (todo id) is not -1, means todo exists, means update todo\n        } else {\n            TodoDataService.updateTodo(username, this.state.id, todo)\n                .then(() => this.props.history.push(\"/todos\"))\n        }\n    }\n\n    // on Formik Validate call\n    // if errors populated, will not call onSubmit above\n    validate(values) {\n        let errors = {}\n\n        if (!values.description) {\n            errors.description = \"Enter a description\"\n        } else if (values.description.length < 5) {\n            errors.description = \"Enter at least 5 characters for description\"\n        }\n\n        if (!moment(values.targetDate).isValid()) {\n            errors.targetDate = \"Enter a valid target Date\"\n        }\n\n        return errors\n    }\n\n    render() {\n\n        let { name, email, password, businessName } = this.state\n\n        return (\n            <div>\n                <Container>\n                    <Row>\n                        <Col></Col>\n                        <Col>\n                <h1 className=\"text-white\">Todo</h1>\n                <div className=\"container text-white\">\n                    <Formik\n                        initialValues={{ name,email,password,business }}\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning \"></ErrorMessage>\n                                    <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\"></ErrorMessage>\n                                    <fieldset className=\"form-group\">\n                                        <label >Description</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\"></Field>\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Target Date</label>\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\"></Field>\n                                    </fieldset>\n                                    <button className=\"btn btn-success\" type=\"submit\" >Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n                </Col>\n                <Col></Col>\n                </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default TodoComponent;"]},"metadata":{},"sourceType":"module"}